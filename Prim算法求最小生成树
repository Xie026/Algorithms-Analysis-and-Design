
/*Prim算法求最小生成树*/
#include<stdio.h>    
#define MAXV 100  
#define MAXW 10000
  
int graph[MAXV][MAXV];  
  
void prim(int graph[][MAXV],int n){  
    int dist[MAXV];
	//dist[i]表示以i为终点的边的最小权值，当dist[i]=0表示i点加入了MST  
    int MST[MAXV];
	//MST[i]表示对应dist[i]的起点，当MST[i]=0表示起点i加入了MST  
    int i,j,minw,minv,sum=0;
	//定义一个最小权值minw和一个最小顶点minv，sum表示权值和 
	  
    for(i=2;i<=n;i++){  
        dist[i]=graph[1][i];
		//dist存放以顶点1为起点，可以直达其他点的边的权值 
        MST[i]=1;//默认以顶点1为最小生成树的起始点 
    }  
    MST[1] = 0;  
    for(i=2;i<=n;i++){  
        minw=MAXW;//minw的初始值为最大权值 
        minv=0;  
        for(j=2;j<=n;j++){  
            if(dist[j]<minw&&dist[j]!=0){  
                minw=dist[j];//找出最小权值
                minv=j;//找出最小的顶点 
            }  
        }  
        printf("V%d-V%d=%d\n",MST[minv],minv,minw); 
        sum+=minw;
        dist[minv]=0;//该处权值设为0，表示已经加入到了最小生成树中 
        for(j=2;j<=n;j++){  
            if(graph[minv][j]<dist[j]){
			    //对顶点minv可以直达的顶点进行权值更新  
                dist[j] = graph[minv][j];  
                MST[j] = minv;
            }  
        }  
    }  
    printf("最小权值之和=%d\n",sum);
} 
 
int main(){  
    int i,j,t,Nv,Ne,weight; 
	printf("输入顶点数和边数：");  
    scanf("%d%d",&Nv,&Ne);//Nv表示顶点数，Ne表示边的个数  
    for(i=1;i<=Nv;i++){//初始化图   
        for(j=1;j<=Nv;j++){  
            graph[i][j]=MAXW; 
        }  
    }   
    for(t=1;t<=Ne;t++){  
        scanf("%d%d%d",&i,&j,&weight);
        graph[i][j]=weight;  
        graph[j][i]=weight;//无向图 
    }  
    
    prim(graph,Nv);  
    return 0;  
}  
